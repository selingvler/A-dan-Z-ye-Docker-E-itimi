1: İlk olarak sistemde bir temizlik yapalım ki alıştırmalarımızla çakışma olmasın. Varsa sistemdeki tüm containerları ve kullanıcı tanımlı bridge networkleri silelim.
``` docker container prune ```
``` docker network prune ```

2: "alistirma-agi" adında ve 10.10.0.0/16 subnetinde, 10.10.10.0/24 ip-aralığından ip dağıtacak ve gateway olarak da 10.10.10.10 tanımlanacak bir kullanıcı tanımlı bridge network yaratalım. (bu sizin yerel ağınızda kullandığınız bir ağ aralığıysa başka bir cidr kullanabilirsiniz). Bu ağın özelliklerini inspect komutuyla kontrol edin.
```docker network create --driver=bridge --subnet=10.10.0.0/16 --ip-range=10.10.10.0/24 --gateway=10.10.10.10 alistirma-agi ```
``` docker network inspect alistirma-agi ```
3: nginx imajının 1.16 versiyonundan web1 adından detached bir container yaratın. Bu containerı default bridge networküne değil de alistirma-agi networküne bağlı olarak yaratın. Host'un 8080 tcp portuna gelen isteklerin bu containerın 80 portuna gitmesini sağlayın.
``` docker container run -d --name web1 --net alistirma-agi --publish 8080:80 nginx:1.16 ```

4: Bu sisteme browser üzerinden erişin ve daha sonra bir kaç kez sayfayı refresh edin. Ardından bu container'ın loglarına erişerek az önceki erişimlerinizin loglarını kontrol edin. 
``` docker logs web1 ```

5: Container loglarını follow modunda takip ederken browser'dan bu web sitesinde olmayan bir url'e gitmeye çalışın. Örneğin xyz.html Bunun ürettiği hatayı canlı olarak loglardan takip edin. 
``` docker logs -f web1  ```
6: ozgurozturknet/adanzyedocker imajından test1 adından bir container yaratın. -dit ile yaratın sh shellini açın. Bu container default bridge network'e bağlı olsun. 
``` docker container run --dit --nanme test1 ozgurozturknet/adanzyedocker sh```

7: Bu container'ı "alistirma-agi" networküne de bağlayın.
``` docker network connect alistirma-agi test1 ```

8: Container'a attach işlemiyle bağlanın ve container içerisinden web1'i pinglemeye çalışın. Container'ı kapamadan çıkın. 
``` docker attach test1 ```
``` ping web1``` ^C, kapatmadan çıkın control p ve q

9: Bu containerların çalıştığını kontrol edin ve ardından çalışıyor haldeyken bunları silin. 
``` docker ps ```
``` docker container run -f web1 test1 ```

10: Terminalde eğitim klasörünün altındaki kisim4/bolum43 klasörüne geçin. 

11: ozgurozturknet/webkayit imajından websrv adinda detached bir container yaratın. "alistirma-agi" networküne bağlı olsun. Maksimum 2 logical cpu kullanacak şekilde kısıtlansın. 80 portunu host üstündeki 80 portuyla publish edin. env.list dosyasının bu containera enviroment variable olarak aktarılmasını sağlayın. 
``` docker container run -d --name websrv --net alistirma-agi --cpus="2" --publish 80:80 --env-file ./env.list ozgurozturknet/webkayit```

12: ozgurozturknet/webdb imajından mysqldb adinda detached bir container yaratın. "alistirma-agi" networküne bağlı olsun. Maksimum 1gb memory kullanacak şekilde kısıtlansın. envmysql.list dosyasının bu containera enviroment variable olarak aktarılmasını sağlayın. 
``` docker container run -d --name mysqldb --net alistirma-agi --memory=1g --env-file ./envmysql.list ozgurozturknet/webdb```

13: mysqldb containerının loglarını kontrol ederek düzgün şekilde başlatılabildiğini teyit edin. 
``` docker container logs mysqldb```

14: Browser'dan websrv container'ının yayınladığı web sitesine bağlanın. Karşınıza çıkan formu doldurup bir tane jpg dosyayı da seçerek add tuşuna basın. Ardından kayitlari gör diyerek işlemin başarılı olduğunu teyit edin. 
15: Oluşturduğunuz containerları ve alistirma-agi'ni silin.
-----


1: İlk olarak sistemde bir temizlik yapalım ki alıştırmalarımızla çakışma olmasın. 
Varsa sistemdeki tüm containerları silelim. 

2: Docker logout ve docker login komutlarını kullanarak hesabımızdan logout olup tekrar login olalım. 

3: Önceden oluşturduğunuz ve saklamanız gereken imajlar var ise bunları docker hub'a gönderin 
ve ardından sistemdeki tüm imajları silin
```docker image push ozgurozturknet/merhaba:latest```

4: Docker hub'da kendi hesabınız altinda "alistirma" adıyla public bir repository yaratın.

5: Centos imajının latest ve 7, ubuntu imajının latest, 18.04 ve 20.04, alpine imajının latest, 
nginx imajının latest ve alpine tagli imajlarını sisteme çekin. 
``` docker pull centos:latest ```
``` docker pull ubuntu:18.04```

6: ubuntu:18.04 imajına dockerhubkullaniciadiniz/alistirma:ubuntu olarak tag ekleyin ve ardından bu yeni imajı 
docker hub'a gönderin. Alistirma repository'inizden imajı check edin. 
``` docker image tag ubuntu:18.04 egitim/alistirma:ubuntu```

7:Bu alistirma.txt dosyasının olduğu klasörde bir Dockerfile oluşturun: 
- Base imaj olarak nginx:latest imajını kullanın
- İmaja LABEL="kendi adınız ve erişim bilgileriniz" şeklinde label ekleyiniz. 
- KULLANICI adında bir enviroment variable tanımlayın ve değer olarak adınızı atayın
- RENK adından bir build ARG tanımlayın
- Sistemi update edin ve ardından curl, htop ve wget uygulamalarını kurun
- /gecici klasörüne geçin ve https://wordpress.org/latest.tar.gz dosyasını buraya ekleyin
- /usr/share/nginx/html klasörüne geçin ve html/${RENK}/ klasörünün içeriğini buraya kopyalayın
- Healtcheck talimatı girelim. curl ile localhost'u kontrol etsin. Başlangıç periodu 5 saniye, deneme aralığı 30s ve
zaman aşımı süresi de 30 saniye olsun. Deneme sayısı 3 olsun. 
- Bu imajdan bir container yaratıldığı zaman ./script.sh dosyasının çalışmasını sağlayan talimatı exec formunda girin. 

alistirma.txt dosyası içinde Dockerfile oluştur
```
FROM nginx:latest
LABEL maintainer = "Selin Güler @selinguler
ENV KULLANICI = "Selin"
ARG RENK
RUN apt-get update && apt-get install && curl htop wget
WORKDIR gecici
ADD https://wordpress.org/latest.tar.gz
WORKDIR /usr/share/nginx/html
COPY html/${RENK}/
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 CMD curl -f http://localhost/ || exit 1
CMD [./script.sh]
```

8: Bu Dockerfile dosyasından 2 imaj yaratın. Birinci imajda build ARG olarak RENK:kirmizi ikinci imajda da
build ARG olarak RENK:sari kullanın. Kirmizi olan imajın tagi dockerhubkullaniciadiniz/alistirma:kirmizi 
Sari olan imajin tagi dockerhubkullaniciadiniz/alistirma:sari olsun. 
```docker image build -t egitim/alistirma:kirmizi --build-arg RENK = kirmizi .```
```docker image build -t egitim/alistirma:sari --build-arg RENK = sari .```


9: dockerhubkullaniciadiniz/alistirma:kirmizi imajını kullanarak bir container yaratın. Detach olsun.
Makinenin 80 portuna gelen istekler bu containerın 80 portuna gitsin. Container adi kirmizi olsun.
Browser'dan http://127.0.0.1 sayfasına gidip check edin.  
```docker container run -d -p 80:80 --name kirmizi egitim/alistirma:kirmizi```

10: dockerhubkullaniciadiniz/alistirma:sari imajını kullanarak bir container yaratın. Detach olsun.
Makinenin 8080 portuna gelen istekler bu containerın 80 portuna gitsin.
KULLANICI enviroment variable değerini "Deneme" olarak atayın. Container adi sari olsun. 
Browser'dan http://127.0.0.1:8080 sayfasına gidip check edin.
```docker container run -d -p 8080:80 --name sari --env KULLANICI="deneme" egitim/alistirma:sari```

11: Containerları kapatıp silelim. 

12: Bu alistirma.txt dosyasının olduğu klasörde Dockerfile.multi isimli bir Dockerfile oluşturun: 
- Bu multi stage build alıştırması olacak. 
- Birinci stage'i  mcr.microsoft.com/java/jdk:8-zulu-alpine imajından oluşturun ve stage adı birinci olsun
- /usr/src/uygulama klasörüne geçin ve source klasörünün içeriğini buraya kopyalayın
- "javac uygulama.java" komutunu çalıştırarak uygulamanızı derleyin
- mcr.microsoft.com/java/jre:8-zulu-alpine imajından ikinci aşamayı başlatın. 
- /uygulama klasörüne geçin ve birinci aşamadıki imajın /usr/src/uygulama klasörünün içeriğini buraya kopyalayın
- Bu imajdan container yaratıldığı zaman "java uygulama" komutunun çalışması için talimat girin

alistirma.txt dosyası içinde Dockerfile.multi oluştur
```
FROM mcr.microsoft.com/java/jdk:8-zulu-alpine AS birinci
COPY /source /usr/src/uygulama
WORKDIR /usr/src/uygulama
RUN javac uygulama.java

FROM mcr.microsoft.com/java/jre:8-zulu-alpine
WORKDIR /uygulama
COPY --from=birinci /usr/src/uygulama .
CMD ["java", "uygulama"]
```

13: Bu Dockerfile.multi dosyasından dockerhubkullaniciadiniz/alistirma:java tagli bir imaj yaratın. 
``` docker image build -t egitim/alistirma:java  -f Dockerfile.multi```

14: Bu imajdan bir container yaratın ve java uygulamanızın çıkardığı mesajı görün.
``` docker run egitim/alistirma:java ```

15: dockerhubkullaniciadiniz/alistirma:kirmizi, dockerhubkullaniciadiniz/alistirma:sari, dockerhubkullaniciadiniz/alistirma:java
imajlarını Docker hub'a yollayın. 
``` docker push egitim/alistirma:kirmizi ```

16: Docker hub'daki registry isimli imajdan lokal bir Docker Registry çalıştırın. 
```docker container run -d -p 5000:5000 --restart always --name registry registry```

17: dockerhubkullaniciadiniz/alistirma:kirmizi, dockerhubkullaniciadiniz/alistirma:sari, dockerhubkullaniciadiniz/alistirma:java
imajlarını yeniden tagleyerek bu lokal registry'e gönderin ve ardından bu registry'nin web arayüzünden kontrol edin. 
```docker image tag egitim/alistirma:kirmizi 127.0.0.1:500/sari:latest ```
```docker image push 127.0.0.1:500/sari:latest```
